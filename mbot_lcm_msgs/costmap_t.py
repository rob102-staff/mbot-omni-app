"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import mbot_lcm_msgs.cell_coordinate_t

class costmap_t(object):
    __slots__ = ["utime", "num_cells", "pairs", "distances"]

    __typenames__ = ["int64_t", "int32_t", "mbot_lcm_msgs.cell_coordinate_t", "float"]

    __dimensions__ = [None, None, ["num_cells"], ["num_cells"]]

    def __init__(self):
        self.utime = 0
        self.num_cells = 0
        self.pairs = []
        self.distances = []

    def encode(self):
        buf = BytesIO()
        buf.write(costmap_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qi", self.utime, self.num_cells))
        for i0 in range(self.num_cells):
            assert self.pairs[i0]._get_packed_fingerprint() == mbot_lcm_msgs.cell_coordinate_t._get_packed_fingerprint()
            self.pairs[i0]._encode_one(buf)
        buf.write(struct.pack('>%df' % self.num_cells, *self.distances[:self.num_cells]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != costmap_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return costmap_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = costmap_t()
        self.utime, self.num_cells = struct.unpack(">qi", buf.read(12))
        self.pairs = []
        for i0 in range(self.num_cells):
            self.pairs.append(mbot_lcm_msgs.cell_coordinate_t._decode_one(buf))
        self.distances = struct.unpack('>%df' % self.num_cells, buf.read(self.num_cells * 4))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if costmap_t in parents: return 0
        newparents = parents + [costmap_t]
        tmphash = (0x2c65402481f7ac9f+ mbot_lcm_msgs.cell_coordinate_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if costmap_t._packed_fingerprint is None:
            costmap_t._packed_fingerprint = struct.pack(">Q", costmap_t._get_hash_recursive([]))
        return costmap_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

